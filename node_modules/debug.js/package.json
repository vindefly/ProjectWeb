{
  "name": "debug.js",
  "version": "0.0.1",
  "description": "Hardening javascript in javascript",
  "main": "examples/jsdoc2debugjs/jsdoc2debug.js",
  "directories": {
    "doc": "docs",
    "example": "examples",
    "test": "tests"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.6.0"
  },
  "scripts": {
    "test": "make tests"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jeromeetienne/debug.js.git"
  },
  "keywords": [
    "debug",
    "javascript"
  ],
  "author": {
    "name": "Jerome Etienne"
  },
  "license": "MIT",
  "bin": {
    "jsdoc2debugjs": "./examples/jsdoc2debugjs/jsdoc2debug.js"
  },
  "readme": "debugjs\n=======\n\nHardening Your Javascript Code in Javascript.\n\nTODO\n====\n* rename to hardening.js ?\n  * safer.js\n* put jsdoc2debug.js in npm \n* put debug.js in bower\n* how to easily include it in node.js ? \n  * single require ?\n\n\n\n===========================\n\n#### debug.js: javascript made easy to debug\nJavascript was slow and hard to debug for a long time.\nNow it is no more slow.\nBut it is still hard to debug. \ndebug.js proposes to fill this gap\nand provides a bunch of practical tools \nwhich makes your javascript code much easier to debug.\n\n* With debug.js, your classes can declare functions and property as private/public.\nThus if a private function is called from an unauthorised location, you will \nbe immediatly warned. \n* With debug.js, you can declare attributes to functions e.g.\nyou can mark it as deprecated, and \nbe notified when it is used.\nYou can trigger performance profiling on this function and see if it needs optimisation.\nYou can track who is using it.\nYou can put conditional breakpoint.\n* With debug.js, you can have strong type checking. \nIt will check the parameters type and numbers of a function when it is called.\nIf you expect to get a Number and a String, debug.js will check and notifies\nyou when it happens to be wrong. \nIt is even possible to do that on any object property.\n* With debug.js, it is possible to automatically detect your global variable, then \nto automatically local is using them, thus you can remove them easily.\n  \n#### TODO\n* fnattr to track usage\n* console.log to filter by origin\n  * DONE not tested\n* stacktrace.track to filter by origin and order by occurance\n  * DONE to test\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jeromeetienne/debug.js/issues"
  },
  "_id": "debug.js@0.0.1",
  "dist": {
    "shasum": "afb3b0c53c31e425be978a296dd034edbec753b7"
  },
  "_from": "debug.js@",
  "_resolved": "https://registry.npmjs.org/debug.js/-/debug.js-0.0.1.tgz"
}
